////////////////
// SPARK TEST //
////////////////

// SPARK TEST: counting of PI number
spark-submit --class org.apache.spark.examples.SparkPi --master local $SPARK_HOME/examples/jars/spark-examples_2.11-2.2.1.jar 10

///////////////
// utilities //
///////////////

val prddn = (rdd: RDD[_], limit: Int) => rdd.collect.slice(0,limit).foreach(println)

/////////////////////////////
// play with customer data //
/////////////////////////////

val cords = sc.textFile("../../SparkScala/customer-orders.csv")

cords.map(_.split(",")).map(arr => (arr(0),arr(1),arr(2)))

res35.map(r => (r._1.toInt, r._3.toFloat)).reduceByKey((x,y) => x+y)

res40.map(r => (r._2,r._1)).sortByKey().map(r => (r._2,r._1))

prdd(res40.filter(x => x._1 == 99),2)

//////////////////////////
// play with movie data //
//////////////////////////

val movies = sc.textFile("../../ml-100k/u.data")

val moviedata = movies.map(l => (l.split("\t")(1),1))

prdd(res52.map(r => (r._1.toInt, r._2.toInt)).sortByKey(), 10000)

prdd(res52.map(r => (r._1.toInt, r._2.toInt)).filter(r => r._1 == 583), 10000)

///////////////////////////////////
// play with hero social network //
///////////////////////////////////

val marvelGraphFile = sc.textFile("../../SparkScala/Marvel-graph.txt")

val heroComicsOccurrences = marvelGraphFile.flatMap(_.split("\\D+")).map(x => (x.toInt,1)).reduceByKey((a,b) => a+b)

//////////////////////////
// external scala shell //
//////////////////////////

import org.apache.spark.rdd._
import scala.math.min
import scala.math.max

import scala.io.Source

import scala.io.Codec
import java.nio.charset.CodingErrorAction

val prdd  = (rdd: RDD[_]) => rdd.collect.foreach(println)
val prddn = (rdd: RDD[_], limit: Int) => rdd.collect.slice(0,limit).foreach(println)

package object myutils {
    implicit class BooleanConversion(val s: String) {
        def increment = s.map(c => (c + 1).toChar)
    }
}


implicit class AnyExtensions[A](x: A) { def whenSatisfying(f: A => Boolean)(action: A => Unit): Unit = if (f(x)) action(x) }
implicit class Editing(x: String) { def removeAll(toDelete: String): String = x.replace(toDelete,"") }

Array("1,2","1,3","1,4","","a","abc","fr","","2","","5","").foreach(
	_.split(",").whenSatisfying( _.length > 1 )( println( _(0).toInt, _(1).toInt ) )
)

//////////
// JOIN //
//////////

scala> val rdd1 = sc.parallelize(Seq(
     |                ("math",    55),
     |                ("math",    56),
     |                ("english", 57),
     |                ("english", 58),
     |                ("science", 59),
     |                ("science", 54)))
rdd1: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[45] at parallelize at :21

scala> val rdd2 = sc.parallelize(Seq(
     |                ("math",    60),
     |                ("math",    65),
     |                ("science", 61),
     |                ("science", 62),
     |                ("history", 63),
     |                ("history", 64)))
rdd2: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[46] at parallelize at :21

scala> val joined = rdd1.join(rdd2)
joined: org.apache.spark.rdd.RDD[(String, (Int, Int))] = MapPartitionsRDD[49] at join at :25

scala> joined.collect()
res15: Array[(String, (Int, Int))] = Array((math,(55,60)), (math,(55,65)), (math,(56,60)), (math,(56,65)), (science,(59,61)), (science,(59,62)), (science,(54,61)), (science,(54,62)))

scala> val leftJoined = rdd1.leftOuterJoin(rdd2)
leftJoined: org.apache.spark.rdd.RDD[(String, (Int, Option[Int]))] = MapPartitionsRDD[52] at leftOuterJoin at :25

scala> leftJoined.collect()
res16: Array[(String, (Int, Option[Int]))] = Array((math,(55,Some(60))), (math,(55,Some(65))), (math,(56,Some(60))), (math,(56,Some(65))), (english,(57,None)), (english,(58,None)), (science,(59,Some(61))), (science,(59,Some(62))), (science,(54,Some(61))), (science,(54,Some(62))))

scala> val rightJoined = rdd1.rightOuterJoin(rdd2)
rightJoined: org.apache.spark.rdd.RDD[(String, (Option[Int], Int))] = MapPartitionsRDD[55] at rightOuterJoin at :25

scala> rightJoined.collect()
res17: Array[(String, (Option[Int], Int))] = Array((math,(Some(55),60)), (math,(Some(55),65)), (math,(Some(56),60)), (math,(Some(56),65)), (history,(None,63)), (history,(None,64)), (science,(Some(59),61)), (science,(Some(59),62)), (science,(Some(54),61)), (science,(Some(54),62)))

